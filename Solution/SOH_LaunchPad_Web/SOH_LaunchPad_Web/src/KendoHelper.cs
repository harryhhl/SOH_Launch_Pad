// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using KendoHelper;
//
//    var kendoGridLayout = KendoGridLayout.FromJson(jsonString);

namespace KendoHelper
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class KendoGridLayout
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public List<Column> Columns { get; set; }

        [JsonProperty("dataSource", NullValueHandling = NullValueHandling.Ignore)]
        public DataSource DataSource { get; set; }

    }

    public partial class Column
    {
        [JsonProperty("encoded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Encoded { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public string Field { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public string Width { get; set; }

        [JsonProperty("template", NullValueHandling = NullValueHandling.Ignore)]
        public string Template { get; set; }

        [JsonProperty("headerAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public HeaderAttributes HeaderAttributes { get; set; }

        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [JsonProperty("hidden", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hidden { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("data-field", NullValueHandling = NullValueHandling.Ignore)]
        public string DataField { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }
    }

    public partial class HeaderAttributes
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Id { get; set; }
    }

    public partial class DataSource
    {
        [JsonProperty("data")]
        public object Data { get; set; }

        [JsonProperty("schema", NullValueHandling = NullValueHandling.Ignore)]
        public Schema Schema { get; set; }

        [JsonProperty("offlineStorage")]
        public object OfflineStorage { get; set; }

        [JsonProperty("serverSorting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerSorting { get; set; }

        [JsonProperty("serverPaging", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerPaging { get; set; }

        [JsonProperty("serverFiltering", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerFiltering { get; set; }

        [JsonProperty("serverGrouping", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerGrouping { get; set; }

        [JsonProperty("serverAggregates", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerAggregates { get; set; }

        [JsonProperty("batch", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Batch { get; set; }

        [JsonProperty("inPlaceSort", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InPlaceSort { get; set; }

        [JsonProperty("transport", NullValueHandling = NullValueHandling.Ignore)]
        public Transport Transport { get; set; }

        [JsonProperty("pageSize", NullValueHandling = NullValueHandling.Ignore)]
        public long? PageSize { get; set; }

        [JsonProperty("useRanges", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseRanges { get; set; }

        [JsonProperty("page", NullValueHandling = NullValueHandling.Ignore)]
        public long? Page { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Group { get; set; }
    }

    public partial class Schema
    {
        [JsonProperty("model", NullValueHandling = NullValueHandling.Ignore)]
        public Model Model { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public string Total { get; set; }
    }

    public partial class Model
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Field> Fields { get; set; }
    }

    public partial class Field
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Transport
    {
        [JsonProperty("read", NullValueHandling = NullValueHandling.Ignore)]
        public Read Read { get; set; }

        [JsonProperty("dataSource")]
        public object DataSource { get; set; }
    }

    public partial class Read
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("dataType", NullValueHandling = NullValueHandling.Ignore)]
        public string DataType { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("contentType", NullValueHandling = NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [JsonProperty("xhrFields", NullValueHandling = NullValueHandling.Ignore)]
        public XhrFields XhrFields { get; set; }
    }

    public partial class XhrFields
    {
        [JsonProperty("withCredentials", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithCredentials { get; set; }
    }


    public enum TypeEnum { Date, Number, String };

    public partial class KendoGridLayout
    {
        public static KendoGridLayout FromJson(string json) => JsonConvert.DeserializeObject<KendoGridLayout>(json, KendoHelper.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KendoGridLayout self) => JsonConvert.SerializeObject(self, KendoHelper.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "date":
                    return TypeEnum.Date;
                case "number":
                    return TypeEnum.Number;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Date:
                    serializer.Serialize(writer, "date");
                    return;
                case TypeEnum.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
